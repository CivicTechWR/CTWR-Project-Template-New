---
name: Template Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  template-validation:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validate template structure
        run: |
          echo "üîç Validating CivicTechWR Project Template structure..."

          # Check essential template files exist
          essential_files=(
            "README.md"
            "LICENSE"
            "CODE_OF_CONDUCT.md"
            ".gitignore"
            "scripts/setup.sh"
            "scripts/setup-project.sh"
          )

          for file in "${essential_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing essential template file: $file"
              exit 1
            fi
          done
          echo "‚úÖ Essential template files found."

      - name: Validate documentation structure
        run: |
          echo "üìö Validating documentation structure..."

          required_docs=(
            "docs/DVF_SCORECARD.md"
            "docs/PROJECT_PITCH.md"
            "docs/TECHNICAL_DESIGN.md"
            "docs/USER_RESEARCH.md"
            "docs/PROJECT_MANAGEMENT.md"
            "docs/DEMO_PREP.md"
            "docs/IMPACT_TRACKING.md"
            "docs/CONTRIBUTING.md"
            "docs/SECURITY_GUIDE.md"
            "docs/GITHUB_PAGES.md"
            "docs/ACCESSIBILITY_GUIDE.md"
            "docs/REPOSITORY_SECURITY.md"
          )

          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "‚ùå Missing required documentation: $doc"
              exit 1
            fi
          done
          echo "‚úÖ Documentation structure validated."

      - name: Validate GitHub templates
        run: |
          echo "üóÇÔ∏è Validating GitHub templates..."

          github_templates=(
            ".github/ISSUE_TEMPLATE/bug_report.yml"
            ".github/ISSUE_TEMPLATE/feature_request.yml"
            ".github/ISSUE_TEMPLATE/general_task.yml"
            ".github/ISSUE_TEMPLATE/community_partnership.yml"
            ".github/PULL_REQUEST_TEMPLATE.md"
          )

          for template in "${github_templates[@]}"; do
            if [ ! -f "$template" ]; then
              echo "‚ùå Missing GitHub template: $template"
              exit 1
            fi
          done
          echo "‚úÖ GitHub templates validated."

      - name: Validate wiki templates
        run: |
          echo "üìñ Validating wiki templates..."

          wiki_templates=(
            "wiki-template/README.md"
            "wiki-template/Home.md"
            "wiki-template/DVF-Scorecard.md"
            "wiki-template/Team-and-Roles.md"
            "wiki-template/Project-Overview.md"
            "wiki-template/Meeting-Notes.md"
          )

          for template in "${wiki_templates[@]}"; do
            if [ ! -f "$template" ]; then
              echo "‚ùå Missing wiki template: $template"
              exit 1
            fi
          done
          echo "‚úÖ Wiki templates validated."

      - name: Validate setup scripts
        run: |
          echo "‚öôÔ∏è Validating setup scripts..."

          if [ ! -f "scripts/setup.sh" ]; then
            echo "‚ùå Missing scripts/setup.sh"
            exit 1
          fi

          if [ ! -x "scripts/setup.sh" ]; then
            echo "‚ùå scripts/setup.sh is not executable"
            exit 1
          fi

          if [ ! -f "scripts/setup-project.sh" ]; then
            echo "‚ùå Missing scripts/setup-project.sh"
            exit 1
          fi

          if [ ! -x "scripts/setup-project.sh" ]; then
            echo "‚ùå scripts/setup-project.sh is not executable"
            exit 1
          fi

          echo "‚úÖ Setup scripts validated."

      - name: Validate Jekyll configuration
        run: |
          echo "üåê Validating Jekyll configuration..."

          if [ ! -f "docs/_config.yml" ]; then
            echo "‚ùå Missing docs/_config.yml"
            exit 1
          fi

          if [ ! -f "docs/Gemfile" ]; then
            echo "‚ùå Missing docs/Gemfile"
            exit 1
          fi

          # Check for GitHub Pages compatibility
          if ! grep -q "github-pages" docs/Gemfile; then
            echo "‚ùå Gemfile doesn't include github-pages gem"
            exit 1
          fi

          echo "‚úÖ Jekyll configuration validated."

  dvf-framework-validation:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validate DVF Framework integration
        run: |
          echo "üéØ Validating DVF Framework integration..."

          # Check for DVF references in key files
          if ! grep -q -i "dvf\|community partner\|talent.*team\|technically exciting\|civic exciting" docs/DVF_SCORECARD.md; then
            echo "‚ùå DVF framework not properly documented in scorecard"
            exit 1
          fi

          if ! grep -q -i "dvf" README.md; then
            echo "‚ùå DVF framework not mentioned in README"
            exit 1
          fi

          echo "‚úÖ DVF Framework integration validated."

      - name: Validate project lifecycle templates
        run: |
          echo "üìÖ Validating 12-week project lifecycle templates..."

          lifecycle_files=(
            "docs/PROJECT_PITCH.md"
            "docs/USER_RESEARCH.md"
            "docs/TECHNICAL_DESIGN.md"
            "docs/PROJECT_MANAGEMENT.md"
            "docs/DEMO_PREP.md"
            "docs/IMPACT_TRACKING.md"
          )

          for file in "${lifecycle_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing lifecycle template: $file"
              exit 1
            fi
          done

          echo "‚úÖ Project lifecycle templates validated."

  security-validation:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validate security documentation
        run: |
          echo "üîí Validating security documentation..."

          security_files=(
            "SECURITY.md"
            "docs/SECURITY_GUIDE.md"
            "docs/REPOSITORY_SECURITY.md"
          )

          for file in "${security_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing security file: $file"
              exit 1
            fi
          done

          echo "‚úÖ Security documentation validated."

      - name: Check for sensitive data patterns
        run: |
          echo "üîç Checking for sensitive data patterns..."

          # Check for common sensitive patterns (basic check)
          if grep -r -i "api[_-]key\|secret\|password\|token" . \
             --exclude-dir=.git \
             --exclude-dir=node_modules \
             --exclude="*.md" \
             --exclude="SECURITY.md" \
             --exclude="docs/SECURITY_GUIDE.md"; then
            echo "‚ö†Ô∏è Found potential sensitive data patterns - please review"
          else
            echo "‚úÖ No obvious sensitive data patterns found"
          fi

  civic-tech-validation:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validate civic tech compliance
        run: |
          echo "üèõÔ∏è Validating civic tech best practices..."

          # Check accessibility documentation
          if [ ! -f "docs/ACCESSIBILITY_GUIDE.md" ]; then
            echo "‚ùå Missing accessibility documentation"
            exit 1
          fi

          # Check for community engagement templates
          if [ ! -f ".github/ISSUE_TEMPLATE/community_partnership.yml" ]; then
            echo "‚ùå Missing community partnership template"
            exit 1
          fi

          # Check for inclusive language
          if grep -q -i "master\|slave\|blacklist\|whitelist" README.md docs/*.md; then
            echo "‚ö†Ô∏è Consider reviewing language for inclusivity"
          fi

          echo "‚úÖ Civic tech compliance validated."