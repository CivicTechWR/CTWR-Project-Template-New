name: Template Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  template-validation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Validate template structure
      run: |
        echo "üîç Validating CivicTechWR Project Template structure..."

        # Check essential template files exist
        essential_files=(
          "README.md"
          "LICENSE"
          "CODE_OF_CONDUCT.md"
          ".gitignore"
          "scripts/setup.sh"
          "scripts/setup-project.sh"
        )

        for file in "${essential_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing essential template file: $file"
            exit 1
          fi
        done
        echo "‚úÖ Essential template files found."

    - name: Validate documentation structure
      run: |
        echo "üìö Validating documentation structure..."

        required_docs=(
          "docs/DVF_SCORECARD.md"
          "docs/CONTRIBUTING.md"
          "docs/PROJECT_PITCH.md"
          "docs/USER_RESEARCH.md"
          "docs/TECHNICAL_DESIGN.md"
          "docs/ACCESSIBILITY_GUIDE.md"
          "docs/DEMO_PREP.md"
          "docs/IMPACT_TRACKING.md"
          "docs/PROJECT_MANAGEMENT.md"
        )

        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "‚ùå Missing required documentation: $doc"
            exit 1
          fi
        done
        echo "‚úÖ Required documentation found."

    - name: Validate GitHub templates
      run: |
        echo "üóÇÔ∏è Validating GitHub templates..."

        github_templates=(
          ".github/ISSUE_TEMPLATE/config.yml"
          ".github/ISSUE_TEMPLATE/feature_request.yml"
          ".github/ISSUE_TEMPLATE/bug_report.yml"
          ".github/ISSUE_TEMPLATE/user_research.yml"
          ".github/ISSUE_TEMPLATE/community_partnership.yml"
          ".github/ISSUE_TEMPLATE/accessibility_issue.yml"
          ".github/ISSUE_TEMPLATE/general_task.yml"
          ".github/PULL_REQUEST_TEMPLATE.md"
        )

        for template in "${github_templates[@]}"; do
          if [ ! -f "$template" ]; then
            echo "‚ùå Missing GitHub template: $template"
            exit 1
          fi
        done
        echo "‚úÖ GitHub templates found."

    - name: Validate wiki templates
      run: |
        echo "üìñ Validating wiki templates..."

        wiki_templates=(
          "wiki-template/README.md"
          "wiki-template/Home.md"
          "wiki-template/Project-Overview.md"
          "wiki-template/DVF-Scorecard.md"
          "wiki-template/Team-and-Roles.md"
          "wiki-template/Meeting-Notes.md"
        )

        for template in "${wiki_templates[@]}"; do
          if [ ! -f "$template" ]; then
            echo "‚ùå Missing wiki template: $template"
            exit 1
          fi
        done
        echo "‚úÖ Wiki templates found."

    - name: Validate script executability
      run: |
        echo "üîß Validating script permissions..."

        if [ ! -x "scripts/setup.sh" ]; then
          echo "‚ùå setup.sh is not executable"
          exit 1
        fi

        if [ ! -x "scripts/setup-project.sh" ]; then
          echo "‚ùå setup-project.sh is not executable"
          exit 1
        fi

        echo "‚úÖ Scripts are executable."

    - name: Check for placeholder content
      run: |
        echo "üîç Checking for placeholder content that needs customization..."

        # Look for common placeholder patterns
        placeholder_patterns=(
          "\[Project Name\]"
          "\[Season X\]"
          "\[your-repo-url\]"
          "\[project-name\]"
        )

        found_placeholders=false
        for pattern in "${placeholder_patterns[@]}"; do
          if grep -r "$pattern" README.md docs/ wiki-template/ --exclude-dir=.git >/dev/null 2>&1; then
            echo "‚úÖ Found placeholder: $pattern (good for template)"
            found_placeholders=true
          fi
        done

        if [ "$found_placeholders" = true ]; then
          echo "‚úÖ Template contains appropriate placeholders for customization."
        else
          echo "‚ö†Ô∏è No placeholders found - template may be over-customized."
        fi

  civic-compliance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Check for sensitive data
      run: |
        echo "üîí Checking for sensitive data..."

        # Check for potential secrets or sensitive data, but exclude expected template content
        if grep -r "password\|secret\|key\|token" \
           --include="*.js" --include="*.py" --include="*.md" --include="*.yml" \
           --exclude-dir=node_modules --exclude-dir=.git \
           --exclude="*template*" \
           --exclude="*example*" \
           . | grep -v "API_KEY\|SECRET_KEY\|your_api_key\|your_secret" | grep -v "placeholder\|example\|template"; then
          echo "‚ö†Ô∏è Potential sensitive data found. Please review."
          exit 1
        else
          echo "‚úÖ No obvious sensitive data found."
        fi

    - name: Verify open source license
      run: |
        if [ ! -f LICENSE ]; then
          echo "‚ùå No LICENSE file found. Civic tech projects should have clear licensing."
          exit 1
        else
          echo "‚úÖ LICENSE file found."
        fi

    - name: Validate DVF framework integration
      run: |
        echo "üèõÔ∏è Validating DVF framework integration..."

        # Check that DVF content exists in key files
        dvf_files=("README.md" "docs/DVF_SCORECARD.md" "wiki-template/DVF-Scorecard.md")
        dvf_terms=("Community Partner" "Talent.*Team" "Technically Exciting" "Civic Exciting")

        for file in "${dvf_files[@]}"; do
          if [ -f "$file" ]; then
            for term in "${dvf_terms[@]}"; do
              if ! grep -q "$term" "$file"; then
                echo "‚ö†Ô∏è DVF term '$term' not found in $file"
              fi
            done
          fi
        done
        echo "‚úÖ DVF framework integration validated."

    - name: Check accessibility considerations
      run: |
        echo "‚ôø Checking accessibility considerations..."

        # Check that accessibility is mentioned in key files
        if grep -q -i "accessibility\|a11y\|wcag" docs/ACCESSIBILITY_GUIDE.md; then
          echo "‚úÖ Accessibility guide contains accessibility content."
        else
          echo "‚ùå Accessibility guide missing accessibility content."
          exit 1
        fi

        if grep -q -i "accessibility" .github/ISSUE_TEMPLATE/accessibility_issue.yml; then
          echo "‚úÖ Accessibility issue template found."
        else
          echo "‚ùå Accessibility issue template missing."
          exit 1
        fi

    - name: Validate CTWR community standards
      run: |
        echo "ü§ù Validating CTWR community standards..."

        # Check for community-specific content
        if grep -q -i "civictechwr\|waterloo region" README.md; then
          echo "‚úÖ CTWR community context found in README."
        else
          echo "‚ö†Ô∏è Limited CTWR community context in README."
        fi

        if [ -f CODE_OF_CONDUCT.md ]; then
          echo "‚úÖ Code of Conduct found."
        else
          echo "‚ùå Code of Conduct missing."
          exit 1
        fi

  template-completeness:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Count template components
      run: |
        echo "üìä Template completeness report..."

        echo "Documentation files: $(find docs/ -name "*.md" | wc -l)"
        echo "Issue templates: $(find .github/ISSUE_TEMPLATE/ -name "*.yml" | wc -l)"
        echo "Wiki templates: $(find wiki-template/ -name "*.md" | wc -l)"
        echo "Scripts: $(find scripts/ -name "*.sh" | wc -l)"
        echo "Workflow files: $(find .github/workflows/ -name "*.yml" | wc -l)"

        total_files=$(find . -type f \( -name "*.md" -o -name "*.yml" -o -name "*.sh" \) ! -path "./.git/*" | wc -l)
        echo "Total template files: $total_files"

        if [ $total_files -gt 25 ]; then
          echo "‚úÖ Template is comprehensive with $total_files files."
        else
          echo "‚ö†Ô∏è Template may be incomplete with only $total_files files."
        fi